//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MTERoads.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RoadsEntities : DbContext
    {
        public RoadsEntities()
            : base("name=RoadsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAct> tblActs { get; set; }
        public virtual DbSet<tblEmp> tblEmps { get; set; }
        public virtual DbSet<tblLogin> tblLogins { get; set; }
        public virtual DbSet<tblMach> tblMaches { get; set; }
        public virtual DbSet<tblOwner> tblOwners { get; set; }
        public virtual DbSet<tblRoad> tblRoads { get; set; }
        public virtual DbSet<tblTransaction> tblTransactions { get; set; }
        public virtual DbSet<tblType> tblTypes { get; set; }
    
        public virtual ObjectResult<AddActivity_Result> AddActivity(Nullable<int> actCode, string actDesc)
        {
            var actCodeParameter = actCode.HasValue ?
                new ObjectParameter("ActCode", actCode) :
                new ObjectParameter("ActCode", typeof(int));
    
            var actDescParameter = actDesc != null ?
                new ObjectParameter("ActDesc", actDesc) :
                new ObjectParameter("ActDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddActivity_Result>("AddActivity", actCodeParameter, actDescParameter);
        }
    
        public virtual ObjectResult<AddEmployee_Result> AddEmployee(Nullable<int> empNum, string empName, Nullable<bool> active)
        {
            var empNumParameter = empNum.HasValue ?
                new ObjectParameter("EmpNum", empNum) :
                new ObjectParameter("EmpNum", typeof(int));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddEmployee_Result>("AddEmployee", empNumParameter, empNameParameter, activeParameter);
        }
    
        public virtual ObjectResult<AddMachine_Result> AddMachine(Nullable<int> machCode, string machDesc, Nullable<decimal> leaseRate, Nullable<int> owner)
        {
            var machCodeParameter = machCode.HasValue ?
                new ObjectParameter("MachCode", machCode) :
                new ObjectParameter("MachCode", typeof(int));
    
            var machDescParameter = machDesc != null ?
                new ObjectParameter("MachDesc", machDesc) :
                new ObjectParameter("MachDesc", typeof(string));
    
            var leaseRateParameter = leaseRate.HasValue ?
                new ObjectParameter("LeaseRate", leaseRate) :
                new ObjectParameter("LeaseRate", typeof(decimal));
    
            var ownerParameter = owner.HasValue ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddMachine_Result>("AddMachine", machCodeParameter, machDescParameter, leaseRateParameter, ownerParameter);
        }
    
        public virtual ObjectResult<AddRoad_Result> AddRoad(Nullable<int> roadCode, string roadName, Nullable<int> roadType, Nullable<decimal> miles)
        {
            var roadCodeParameter = roadCode.HasValue ?
                new ObjectParameter("RoadCode", roadCode) :
                new ObjectParameter("RoadCode", typeof(int));
    
            var roadNameParameter = roadName != null ?
                new ObjectParameter("RoadName", roadName) :
                new ObjectParameter("RoadName", typeof(string));
    
            var roadTypeParameter = roadType.HasValue ?
                new ObjectParameter("RoadType", roadType) :
                new ObjectParameter("RoadType", typeof(int));
    
            var milesParameter = miles.HasValue ?
                new ObjectParameter("Miles", miles) :
                new ObjectParameter("Miles", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddRoad_Result>("AddRoad", roadCodeParameter, roadNameParameter, roadTypeParameter, milesParameter);
        }
    
        public virtual int AddRoadTrans(Nullable<int> emp_No, Nullable<int> mach_No, Nullable<int> activity_Code, Nullable<int> bIA_No, Nullable<double> hours, Nullable<double> lease_Chg, Nullable<System.DateTime> trans_Date)
        {
            var emp_NoParameter = emp_No.HasValue ?
                new ObjectParameter("Emp_No", emp_No) :
                new ObjectParameter("Emp_No", typeof(int));
    
            var mach_NoParameter = mach_No.HasValue ?
                new ObjectParameter("Mach_No", mach_No) :
                new ObjectParameter("Mach_No", typeof(int));
    
            var activity_CodeParameter = activity_Code.HasValue ?
                new ObjectParameter("Activity_Code", activity_Code) :
                new ObjectParameter("Activity_Code", typeof(int));
    
            var bIA_NoParameter = bIA_No.HasValue ?
                new ObjectParameter("BIA_No", bIA_No) :
                new ObjectParameter("BIA_No", typeof(int));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(double));
    
            var lease_ChgParameter = lease_Chg.HasValue ?
                new ObjectParameter("Lease_Chg", lease_Chg) :
                new ObjectParameter("Lease_Chg", typeof(double));
    
            var trans_DateParameter = trans_Date.HasValue ?
                new ObjectParameter("Trans_Date", trans_Date) :
                new ObjectParameter("Trans_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoadTrans", emp_NoParameter, mach_NoParameter, activity_CodeParameter, bIA_NoParameter, hoursParameter, lease_ChgParameter, trans_DateParameter);
        }
    
        public virtual ObjectResult<EditActivity_Result> EditActivity(Nullable<int> oActCode, Nullable<int> nActCode, string nActDesc)
        {
            var oActCodeParameter = oActCode.HasValue ?
                new ObjectParameter("oActCode", oActCode) :
                new ObjectParameter("oActCode", typeof(int));
    
            var nActCodeParameter = nActCode.HasValue ?
                new ObjectParameter("nActCode", nActCode) :
                new ObjectParameter("nActCode", typeof(int));
    
            var nActDescParameter = nActDesc != null ?
                new ObjectParameter("nActDesc", nActDesc) :
                new ObjectParameter("nActDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EditActivity_Result>("EditActivity", oActCodeParameter, nActCodeParameter, nActDescParameter);
        }
    
        public virtual ObjectResult<EditEmployee_Result> EditEmployee(Nullable<int> oEmpNum, Nullable<int> nEmpNum, string nEmpName, Nullable<bool> nActive)
        {
            var oEmpNumParameter = oEmpNum.HasValue ?
                new ObjectParameter("oEmpNum", oEmpNum) :
                new ObjectParameter("oEmpNum", typeof(int));
    
            var nEmpNumParameter = nEmpNum.HasValue ?
                new ObjectParameter("nEmpNum", nEmpNum) :
                new ObjectParameter("nEmpNum", typeof(int));
    
            var nEmpNameParameter = nEmpName != null ?
                new ObjectParameter("nEmpName", nEmpName) :
                new ObjectParameter("nEmpName", typeof(string));
    
            var nActiveParameter = nActive.HasValue ?
                new ObjectParameter("nActive", nActive) :
                new ObjectParameter("nActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EditEmployee_Result>("EditEmployee", oEmpNumParameter, nEmpNumParameter, nEmpNameParameter, nActiveParameter);
        }
    
        public virtual ObjectResult<EditMachine_Result> EditMachine(Nullable<int> oMachNum, Nullable<int> nMachNum, string nMachDesc, Nullable<double> nLeaseRate, Nullable<bool> nActive)
        {
            var oMachNumParameter = oMachNum.HasValue ?
                new ObjectParameter("oMachNum", oMachNum) :
                new ObjectParameter("oMachNum", typeof(int));
    
            var nMachNumParameter = nMachNum.HasValue ?
                new ObjectParameter("nMachNum", nMachNum) :
                new ObjectParameter("nMachNum", typeof(int));
    
            var nMachDescParameter = nMachDesc != null ?
                new ObjectParameter("nMachDesc", nMachDesc) :
                new ObjectParameter("nMachDesc", typeof(string));
    
            var nLeaseRateParameter = nLeaseRate.HasValue ?
                new ObjectParameter("nLeaseRate", nLeaseRate) :
                new ObjectParameter("nLeaseRate", typeof(double));
    
            var nActiveParameter = nActive.HasValue ?
                new ObjectParameter("nActive", nActive) :
                new ObjectParameter("nActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EditMachine_Result>("EditMachine", oMachNumParameter, nMachNumParameter, nMachDescParameter, nLeaseRateParameter, nActiveParameter);
        }
    
        public virtual ObjectResult<EditRoad_Result> EditRoad(Nullable<int> oRoadCode, Nullable<int> nRoadCode, string nRoadName, Nullable<int> nRoadType, Nullable<double> nMiles)
        {
            var oRoadCodeParameter = oRoadCode.HasValue ?
                new ObjectParameter("oRoadCode", oRoadCode) :
                new ObjectParameter("oRoadCode", typeof(int));
    
            var nRoadCodeParameter = nRoadCode.HasValue ?
                new ObjectParameter("nRoadCode", nRoadCode) :
                new ObjectParameter("nRoadCode", typeof(int));
    
            var nRoadNameParameter = nRoadName != null ?
                new ObjectParameter("nRoadName", nRoadName) :
                new ObjectParameter("nRoadName", typeof(string));
    
            var nRoadTypeParameter = nRoadType.HasValue ?
                new ObjectParameter("nRoadType", nRoadType) :
                new ObjectParameter("nRoadType", typeof(int));
    
            var nMilesParameter = nMiles.HasValue ?
                new ObjectParameter("nMiles", nMiles) :
                new ObjectParameter("nMiles", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EditRoad_Result>("EditRoad", oRoadCodeParameter, nRoadCodeParameter, nRoadNameParameter, nRoadTypeParameter, nMilesParameter);
        }
    
        public virtual int EditRoadTrans(Nullable<int> autoNum, Nullable<int> empNo, Nullable<int> machNo, Nullable<int> actCode, Nullable<int> biaNo, Nullable<double> hours, Nullable<double> lease, Nullable<System.DateTime> trans_Date)
        {
            var autoNumParameter = autoNum.HasValue ?
                new ObjectParameter("autoNum", autoNum) :
                new ObjectParameter("autoNum", typeof(int));
    
            var empNoParameter = empNo.HasValue ?
                new ObjectParameter("empNo", empNo) :
                new ObjectParameter("empNo", typeof(int));
    
            var machNoParameter = machNo.HasValue ?
                new ObjectParameter("machNo", machNo) :
                new ObjectParameter("machNo", typeof(int));
    
            var actCodeParameter = actCode.HasValue ?
                new ObjectParameter("actCode", actCode) :
                new ObjectParameter("actCode", typeof(int));
    
            var biaNoParameter = biaNo.HasValue ?
                new ObjectParameter("biaNo", biaNo) :
                new ObjectParameter("biaNo", typeof(int));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("hours", hours) :
                new ObjectParameter("hours", typeof(double));
    
            var leaseParameter = lease.HasValue ?
                new ObjectParameter("lease", lease) :
                new ObjectParameter("lease", typeof(double));
    
            var trans_DateParameter = trans_Date.HasValue ?
                new ObjectParameter("Trans_Date", trans_Date) :
                new ObjectParameter("Trans_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditRoadTrans", autoNumParameter, empNoParameter, machNoParameter, actCodeParameter, biaNoParameter, hoursParameter, leaseParameter, trans_DateParameter);
        }
    
        public virtual ObjectResult<GetAllActivities_Result> GetAllActivities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllActivities_Result>("GetAllActivities");
        }
    
        public virtual ObjectResult<GetAllEmployees_Result> GetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployees_Result>("GetAllEmployees");
        }
    
        public virtual ObjectResult<GetAllMachines_Result> GetAllMachines()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllMachines_Result>("GetAllMachines");
        }
    
        public virtual ObjectResult<GetAllOwners_Result> GetAllOwners()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOwners_Result>("GetAllOwners");
        }
    
        public virtual ObjectResult<GetAllRoads_Result> GetAllRoads()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoads_Result>("GetAllRoads");
        }
    
        public virtual ObjectResult<GetAllRoadTrans_Result> GetAllRoadTrans(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoadTrans_Result>("GetAllRoadTrans", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetAllRoadTypes_Result> GetAllRoadTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoadTypes_Result>("GetAllRoadTypes");
        }
    
        public virtual ObjectResult<GetMachByCode_Result> GetMachByCode(Nullable<int> mach_code)
        {
            var mach_codeParameter = mach_code.HasValue ?
                new ObjectParameter("Mach_code", mach_code) :
                new ObjectParameter("Mach_code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachByCode_Result>("GetMachByCode", mach_codeParameter);
        }
    }
}
